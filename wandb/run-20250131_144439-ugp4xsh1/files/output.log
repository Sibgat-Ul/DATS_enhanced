[36m[INFO] CONFIG:
DATASET:
  NUM_WORKERS: 2
  TEST:
    BATCH_SIZE: 128
  TYPE: cifar100
DISTILLER:
  STUDENT: resnet20
  TEACHER: resnet56
  TYPE: DKD
DKD:
  ALPHA: 9.0
  BETA: 72.0
  CE_WEIGHT: 1.0
  T: 2
  WARMUP: 20
EXPERIMENT:
  LOGIT_STAND: true
  NAME: ''
  PROJECT: cifar100_baselines
  TAG: dkd,res56,res20
LOG:
  PREFIX: ./output
  SAVE_CHECKPOINT_FREQ: 40
  TENSORBOARD_FREQ: 500
  WANDB: true
SOLVER:
  ADJUST_TEMPERATURE: false
  BATCH_SIZE: 128
  EPOCHS: 100
  INIT_TEMPERATURE: 4.0
  LR: 0.05
  LR_DECAY_RATE: 0.1
  LR_DECAY_STAGES:
  - 62
  - 75
  - 87
  MAX_TEMPERATURE: 8.0
  MIN_TEMPERATURE: 2.0
  MOMENTUM: 0.9
  TRAINER: scheduler
  TYPE: SGD
  WEIGHT_DECAY: 0.0005
[0m
Files already downloaded and verified
Files already downloaded and verified
[36m[INFO] Loading teacher model[0m
/home/sibyz/PycharmProjects/DATS_enhanced/mdistiller/engine/utils.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  return torch.load(f, map_location="cpu")
[36m[INFO] Extra parameters of DKD: 0[0m[0m
  0%|                                                                                                                                                                                                    | 0/391 [00:00<?, ?it/s]/home/sibyz/miniconda3/envs/pt/lib/python3.12/site-packages/torch/nn/_reduction.py:51: UserWarning: size_average and reduce args will be deprecated, please use reduction='sum' instead.
  warnings.warn(warning.format(ret))
[32m[TRAIN] Epoch: 1/100 | Temp:3.999| Time(train):0.030| Loss:6.6995| Top-1:3.843[0m:  19%|â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–‰                                                                                       | 73/391 [00:02<00:09, 33.91it/s][0mTraceback (most recent call last):
  File "/home/sibyz/PycharmProjects/DATS_enhanced/tools/train.py", line 179, in <module>
    main(cfg, args.resume, args.opts)
  File "/home/sibyz/PycharmProjects/DATS_enhanced/tools/train.py", line 111, in main
    trainer.train(resume=resume)
  File "/home/sibyz/PycharmProjects/DATS_enhanced/mdistiller/engine/trainer.py", line 109, in train
    self.train_epoch(epoch)
  File "/home/sibyz/PycharmProjects/DATS_enhanced/mdistiller/engine/trainer.py", line 304, in train_epoch
    msg = self.train_iter(data, epoch, train_meters)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sibyz/PycharmProjects/DATS_enhanced/mdistiller/engine/trainer.py", line 374, in train_iter
    preds, losses_dict, loss_divergence = self.distiller(image=image, target=target, epoch=epoch)
                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sibyz/miniconda3/envs/pt/lib/python3.12/site-packages/torch/nn/modules/module.py", line 1736, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sibyz/miniconda3/envs/pt/lib/python3.12/site-packages/torch/nn/modules/module.py", line 1747, in _call_impl
    return forward_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sibyz/miniconda3/envs/pt/lib/python3.12/site-packages/torch/nn/parallel/data_parallel.py", line 191, in forward
    return self.module(*inputs[0], **module_kwargs[0])
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sibyz/miniconda3/envs/pt/lib/python3.12/site-packages/torch/nn/modules/module.py", line 1736, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sibyz/miniconda3/envs/pt/lib/python3.12/site-packages/torch/nn/modules/module.py", line 1747, in _call_impl
    return forward_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sibyz/PycharmProjects/DATS_enhanced/mdistiller/distillers/base.py", line 37, in forward
    return self.forward_train(**kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sibyz/PycharmProjects/DATS_enhanced/mdistiller/distillers/DKD.py", line 100, in forward_train
    loss_divergence = teacher_loss.item() - loss_ce.item()
                      ^^^^^^^^^^^^^^^^^^^
KeyboardInterrupt
